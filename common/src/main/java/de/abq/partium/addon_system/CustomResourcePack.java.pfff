package de.abq.partium.addon_system;


import net.minecraft.data.DataGenerator;
import net.minecraft.data.PackOutput;

import java.nio.file.Path;

import com.google.common.collect.ImmutableSet;
import net.minecraft.server.packs.PackResources;
import net.minecraft.server.packs.PackType;
import net.minecraft.server.packs.VanillaPackResources;
import net.minecraft.server.packs.resources.IoSupplier;
import net.minecraft.server.packs.resources.ResourcePack;
import net.minecraft.server.packs.resources.ResourceProvider;
import org.apache.commons.io.IOUtils;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.*;
import java.util.function.Predicate;
import java.util.stream.Collectors;

public class CustomResourcePack implements PackResources {

    private final String name;
    private final File directory;
    private final PackType packType;

    public CustomResourcePack(String name, File directory, PackType packType) {
        this.name = name;
        this.directory = directory;
        this.packType = packType;
    }

    @Override
    protected InputStream getResource(String namespace, String path) throws IOException {
        File resourceFile = new File(directory, path);
        if (resourceFile.exists() && resourceFile.isFile()) {
            return new FileInputStream(resourceFile);
        }
        throw new IOException("Resource not found: " + path);
    }

    @Override
    public boolean hasResource(String namespace, String path) {
        File resourceFile = new File(directory, path);
        return resourceFile.exists() && resourceFile.isFile();
    }

    @Override
    public Set<String> getNamespaces(PackType packType) {
        // Collect namespaces from the addon directory structure
        try {
            return Files.walk(directory.toPath())
                    .filter(Files::isDirectory)
                    .map(Path::getFileName)
                    .map(Path::toString)
                    .collect(Collectors.toSet());
        } catch (IOException e) {
            e.printStackTrace();
            return Collections.emptySet();
        }
    }

    @Override
    public Collection<ResourceProvider> getAllNamespaces(Predicate<String> pathFilter) {
        // This can be simplified by just returning an empty collection or a singleton
        return ImmutableSet.of();
    }

    @Override
    public String getName() {
        return this.name;
    }

    @Override
    public IoSupplier<InputStream> getResourceSupplier(PackType packType, ResourceLocation resourceLocation) {
        if (this.packType == packType) {
            try {
                InputStream stream = getResource(resourceLocation.getNamespace(), resourceLocation.getPath());
                return IoSupplier.create(stream);
            } catch (IOException e) {
                // Log or handle error
            }
        }
        return null;
    }

    @Override
    public Collection<ResourceLocation> getResources(PackType packType, String namespace, String path, int maxDepth, Predicate<String> filter) {
        // Gather resources based on the provided parameters
        try {
            return Files.walk(directory.toPath().resolve(path), maxDepth)
                    .filter(Files::isRegularFile)
                    .map(Path::toString)
                    .filter(filter)
                    .map(resourcePath -> new ResourceLocation(namespace, resourcePath))
                    .collect(Collectors.toList());
        } catch (IOException e) {
            e.printStackTrace();
            return Collections.emptyList();
        }
    }

    @Override
    public void close() {
        // Any cleanup code if necessary
    }

    @Override
    protected boolean containsFile(String namespace, String path) {
        return hasResource(namespace, path);
    }

    @Override
    protected InputStream openFile(String namespace, String path) throws IOException {
        return getResource(namespace, path);
    }

    @Override
    protected void listFiles(String namespace, String path, ResourceProvider provider) {
        // List files under the given namespace and path
        File dir = new File(directory, path);
        if (dir.isDirectory()) {
            for (File file : Objects.requireNonNull(dir.listFiles())) {
                if (file.isFile() && file.getName().endsWith(".json")) {
                    provider.accept(new ResourceLocation(namespace, file.getPath()), IoSupplier.create(file));
                }
            }
        }
    }

    @Override
    public Collection<ResourceLocation> getTopLevelResourceLocations(String path, Predicate<String> filter) {
        // Implement top-level resource discovery logic
        List<ResourceLocation> resourceLocations = new ArrayList<>();
        try {
            Files.walk(directory.toPath().resolve(path))
                    .filter(Files::isRegularFile)
                    .filter(p -> filter.test(p.toString()))
                    .forEach(p -> resourceLocations.add(new ResourceLocation(this.name, p.toString())));
        } catch (IOException e) {
            e.printStackTrace();
        }
        return resourceLocations;
    }
}